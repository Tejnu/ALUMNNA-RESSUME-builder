
'use client';

import { ResumeData } from '@/types/resume';
import { ModernTemplate } from './templates/ModernTemplate';
import { ClassicTemplate } from './templates/ClassicTemplate';
import { MinimalTemplate } from './templates/MinimalTemplate';
import { CreativeTemplate } from './templates/CreativeTemplate';
import { ExecutiveTemplate } from './templates/ExecutiveTemplate';
import { TechnicalTemplate } from './templates/TechnicalTemplate';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Download, Maximize2, ZoomIn, ZoomOut, Eye, FileText, Sparkles, Settings } from 'lucide-react';
import { useState, useRef, useEffect } from 'react';

interface ResumePreviewProps {
  resumeData: ResumeData;
  onDownloadPDFReady?: (downloadFn: () => Promise<void>) => void;
}

export function ResumePreview({ resumeData, onDownloadPDFReady }: ResumePreviewProps) {
  const [zoom, setZoom] = useState(0.8);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [isDownloading, setIsDownloading] = useState(false);
  const [downloadProgress, setDownloadProgress] = useState(0);
  const [downloadStatus, setDownloadStatus] = useState('');
  const [isHovering, setIsHovering] = useState(false);
  const resumeRef = useRef<HTMLDivElement>(null);

  // Safety check for resumeData
  if (!resumeData || !resumeData.personalInfo) {
    return (
      <Card className="card-modern sticky top-24 h-fit overflow-hidden">
        <div className="p-8">
          <div className="text-center space-y-4">
            <div className="w-16 h-16 mx-auto bg-gradient-to-br from-purple-400 to-pink-400 rounded-full flex items-center justify-center">
              <FileText className="h-8 w-8 text-white" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">Live Preview</h3>
              <p className="text-gray-500">Upload a resume or start building to see your live preview</p>
            </div>
            <div className="flex items-center justify-center space-x-2 text-sm text-purple-600">
              <Sparkles className="h-4 w-4" />
              <span>Real-time updates</span>
            </div>
          </div>
        </div>
      </Card>
    );
  }

  const renderTemplate = () => {
    const { selectedTemplate } = resumeData;

    switch (selectedTemplate) {
      case 'modern':
        return <ModernTemplate resumeData={resumeData} />;
      case 'classic':
        return <ClassicTemplate resumeData={resumeData} />;
      case 'minimal':
        return <MinimalTemplate resumeData={resumeData} />;
      case 'creative':
        return <CreativeTemplate resumeData={resumeData} />;
      case 'executive':
        return <ExecutiveTemplate resumeData={resumeData} />;
      case 'technical':
        return <TechnicalTemplate resumeData={resumeData} />;
      default:
        return <ModernTemplate resumeData={resumeData} />;
    }
  };

  // Load html2pdf library with better configuration
  useEffect(() => {
    const loadHtml2PdfScript = () => {
      if (document.querySelector('script[src*="html2pdf"]')) return;
      
      const script = document.createElement('script');
      script.src = 'https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js';
      script.async = true;
      script.onload = () => {
        console.log('html2pdf loaded successfully');
      };
      script.onerror = () => {
        console.warn('Failed to load html2pdf, fallback methods available');
      };
      document.body.appendChild(script);
    };
    
    if (typeof window !== 'undefined') {
      loadHtml2PdfScript();
    }
  }, []);

  // Auto-trigger PDF download when user data is complete (optional feature)
  useEffect(() => {
    const hasBasicInfo = resumeData.personalInfo?.fullName && resumeData.personalInfo?.email;
    const hasContent = resumeData.workExperience?.length > 0 || resumeData.education?.length > 0 || resumeData.skills?.length > 0;
    
    // Auto-download is disabled by default, but could be enabled with a setting
    // if (hasBasicInfo && hasContent && autoDownload) {
    //   setTimeout(() => downloadPDF(), 2000);
    // }
  }, [resumeData]);

  // Expose downloadPDF function to parent component
  useEffect(() => {
    if (onDownloadPDFReady) {
      onDownloadPDFReady(downloadPDF);
    }
  }, [onDownloadPDFReady]);

  const optimizeElementForPDF = async (element: HTMLElement): Promise<HTMLElement> => {
    // Wait for any dynamic content to load
    await new Promise(resolve => setTimeout(resolve, 300));
    
    const clonedElement = element.cloneNode(true) as HTMLElement;
    
    // Add PDF optimization class
    clonedElement.classList.add('pdf-optimized');
    
    // Force all content to be visible and rendered
    const allElements = clonedElement.querySelectorAll('*');
    allElements.forEach(el => {
      const htmlEl = el as HTMLElement;
      
      // Make all text selectable for ATS
      htmlEl.style.userSelect = 'text';
      htmlEl.style.webkitUserSelect = 'text';
      (htmlEl.style as any).MozUserSelect = 'text';
      
      // Ensure visibility
      if (htmlEl.style.display === 'none') {
        htmlEl.style.display = 'block';
      }
      if (htmlEl.style.visibility === 'hidden') {
        htmlEl.style.visibility = 'visible';
      }
      if (htmlEl.style.opacity === '0') {
        htmlEl.style.opacity = '1';
      }
      
      // Force text to be black for better PDF readability
      const computedStyle = window.getComputedStyle(htmlEl);
      if (computedStyle.color === 'rgba(0, 0, 0, 0)' || computedStyle.color === 'transparent') {
        htmlEl.style.color = '#1f2937';
      }
    });
    
    // Remove debug elements and non-essential content
    const debugElements = clonedElement.querySelectorAll('[class*="debug"], .debug, .no-print');
    debugElements.forEach(el => el.remove());
    
    // Fix gradients for PDF compatibility
    const gradientElements = clonedElement.querySelectorAll('[class*="gradient"], [style*="gradient"]');
    gradientElements.forEach(el => {
      const htmlEl = el as HTMLElement;
      htmlEl.style.background = '#6366f1';
      htmlEl.style.backgroundImage = 'none';
      htmlEl.style.color = 'white';
    });
    
    // Fix transparent text elements
    const transparentElements = clonedElement.querySelectorAll('.text-transparent');
    transparentElements.forEach(el => {
      const htmlEl = el as HTMLElement;
      htmlEl.style.color = '#6366f1';
      htmlEl.style.webkitBackgroundClip = 'unset';
      htmlEl.style.backgroundClip = 'unset';
      htmlEl.classList.remove('text-transparent');
    });
    
    // Ensure proper spacing and page breaks
    const sections = clonedElement.querySelectorAll('section, .section, [class*="section"]');
    sections.forEach((section, index) => {
      const htmlSection = section as HTMLElement;
      htmlSection.style.pageBreakInside = 'avoid';
      htmlSection.style.breakInside = 'avoid';
      htmlSection.classList.add('avoid-break');
      
      // Add some spacing between sections
      if (index > 0) {
        htmlSection.style.marginTop = '1.5rem';
      }
    });
    
    // Optimize images
    const images = clonedElement.querySelectorAll('img');
    images.forEach(img => {
      img.style.maxWidth = '100%';
      img.style.height = 'auto';
      img.style.display = 'block';
    });
    
    // Fix flex layouts for PDF
    const flexElements = clonedElement.querySelectorAll('.flex, [style*="display: flex"]');
    flexElements.forEach(el => {
      const htmlEl = el as HTMLElement;
      htmlEl.style.display = 'block';
    });
    
    // Fix grid layouts for PDF
    const gridElements = clonedElement.querySelectorAll('.grid, [style*="display: grid"]');
    gridElements.forEach(el => {
      const htmlEl = el as HTMLElement;
      htmlEl.style.display = 'block';
    });
    
    // Ensure all text content is properly styled
    const textElements = clonedElement.querySelectorAll('h1, h2, h3, h4, h5, h6, p, span, div, li');
    textElements.forEach(el => {
      const htmlEl = el as HTMLElement;
      if (!htmlEl.style.color || htmlEl.style.color === 'transparent') {
        htmlEl.style.color = '#1f2937';
      }
    });
    
    // Add proper font family
    clonedElement.style.fontFamily = 'Inter, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
    
    return clonedElement;
  };

  const downloadPDF = async () => {
    if (isDownloading) return;
    setIsDownloading(true);
    setDownloadProgress(0);
    setDownloadStatus('Preparing resume for download...');
    
    try {
      const element = document.getElementById('resume-preview-content');
      if (!element) {
        throw new Error('Resume preview element not found');
      }

      const fileName = `${resumeData.personalInfo?.fullName?.replace(/\s+/g, '_') || 'Resume'}_${resumeData.selectedTemplate}.pdf`;
      
      setDownloadProgress(10);
      setDownloadStatus('Analyzing template structure...');

      // Template-specific optimization
      const templateType = resumeData.selectedTemplate || 'modern';
      console.log('Processing template:', templateType);
      
      setDownloadProgress(25);
      setDownloadStatus('Optimizing content for PDF...');

      // Enhanced template-aware optimization
      const optimizedElement = await optimizeElementForAllTemplates(element, templateType);
      
      setDownloadProgress(50);
      setDownloadStatus('Generating high-quality PDF...');

      // Multiple PDF generation strategies
      let pdfGenerated = false;
      
      // Strategy 1: html2pdf with enhanced template-specific settings
      try {
        await generateUniversalPDF(optimizedElement, fileName, templateType);
        pdfGenerated = true;
        setDownloadProgress(90);
        setDownloadStatus('Finalizing download...');
      } catch (error) {
        console.log('html2pdf failed, trying browser print...');
      }
      
      // Strategy 2: Enhanced browser print method
      if (!pdfGenerated) {
        try {
          await generateBrowserPDF(optimizedElement, fileName);
          pdfGenerated = true;
          setDownloadProgress(90);
          setDownloadStatus('Finalizing download...');
        } catch (error) {
          console.log('Browser PDF failed, using print fallback...');
        }
      }
      
      // Strategy 3: Print fallback
      if (!pdfGenerated) {
        await enhancedPrintFallback();
      }
      
      setDownloadProgress(100);
      setDownloadStatus('Download complete! ✓');
      
      // Reset after success
      setTimeout(() => {
        setDownloadStatus('');
        setDownloadProgress(0);
      }, 2000);
      
    } catch (error) {
      console.error('Error downloading PDF:', error);
      setDownloadStatus('Error occurred, using print dialog...');
      await enhancedPrintFallback();
    } finally {
      setTimeout(() => {
        setIsDownloading(false);
      }, 1000);
    }
  };

  // Enhanced template-aware optimization for all templates
  const optimizeElementForAllTemplates = async (element: HTMLElement, templateType: string): Promise<HTMLElement> => {
    // Wait for dynamic content and animations to complete
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const clonedElement = element.cloneNode(true) as HTMLElement;
    
    // Template-specific optimizations
    const templateOptimizations = {
      modern: () => optimizeModernTemplate(clonedElement),
      classic: () => optimizeClassicTemplate(clonedElement),
      minimal: () => optimizeMinimalTemplate(clonedElement),
      creative: () => optimizeCreativeTemplate(clonedElement),
      executive: () => optimizeExecutiveTemplate(clonedElement),
      technical: () => optimizeTechnicalTemplate(clonedElement)
    };

    // Apply base optimizations for all templates
    optimizeBaseElements(clonedElement);
    
    // Apply template-specific optimizations
    const optimizeFn = templateOptimizations[templateType as keyof typeof templateOptimizations];
    if (optimizeFn) {
      optimizeFn();
    }

    return clonedElement;
  };

  // Base optimization for all templates
  const optimizeBaseElements = (element: HTMLElement) => {
    // Force all content to be visible and properly formatted
    const allElements = element.querySelectorAll('*');
    allElements.forEach(el => {
      const htmlEl = el as HTMLElement;
      
      // Remove any hidden elements or fix visibility
      if (htmlEl.style.display === 'none' || htmlEl.style.visibility === 'hidden') {
        htmlEl.style.display = 'block';
        htmlEl.style.visibility = 'visible';
      }
      
      // Fix opacity issues
      if (htmlEl.style.opacity === '0' || htmlEl.style.opacity === '') {
        htmlEl.style.opacity = '1';
      }
      
      // Convert flex layouts to block for PDF
      const computedStyle = window.getComputedStyle(htmlEl);
      if (computedStyle.display === 'flex') {
        htmlEl.style.display = 'block';
      }
      
      // Fix grid layouts
      if (computedStyle.display === 'grid') {
        htmlEl.style.display = 'block';
      }
      
      // Remove transforms that might break PDF layout
      htmlEl.style.transform = 'none';
      htmlEl.style.transformOrigin = 'unset';
      
      // Fix positioning issues
      if (computedStyle.position === 'fixed' || computedStyle.position === 'sticky') {
        htmlEl.style.position = 'static';
      }
      
      // Ensure proper z-index
      htmlEl.style.zIndex = 'auto';
      
      // Remove animations and transitions
      htmlEl.style.animation = 'none';
      htmlEl.style.transition = 'none';
      
      // Fix overflow issues
      htmlEl.style.overflow = 'visible';
      htmlEl.style.overflowX = 'visible';
      htmlEl.style.overflowY = 'visible';
    });

    // Fix specific problematic elements
    const textTransparentElements = element.querySelectorAll('.text-transparent');
    textTransparentElements.forEach(el => {
      const htmlEl = el as HTMLElement;
      htmlEl.style.color = '#3b82f6';
      htmlEl.style.background = 'none';
      htmlEl.style.backgroundClip = 'unset';
      htmlEl.style.webkitBackgroundClip = 'unset';
    });

    // Fix gradient backgrounds
    const gradientElements = element.querySelectorAll('[class*="gradient"], .bg-gradient-to-r, .bg-gradient-to-br, .bg-gradient-to-l, .bg-gradient-to-t, .bg-gradient-to-b');
    gradientElements.forEach(el => {
      const htmlEl = el as HTMLElement;
      htmlEl.style.background = '#3b82f6';
      htmlEl.style.backgroundImage = 'none';
      htmlEl.style.color = 'white';
    });

    // Ensure proper font loading
    const textElements = element.querySelectorAll('h1, h2, h3, h4, h5, h6, p, span, div, li, a');
    textElements.forEach(el => {
      const htmlEl = el as HTMLElement;
      if (!htmlEl.style.fontFamily || htmlEl.style.fontFamily === '') {
        htmlEl.style.fontFamily = 'Inter, Roboto, Arial, sans-serif';
      }
    });

    // Fix spacing and margins
    const spacingElements = element.querySelectorAll('[class*="space-"], [class*="gap-"], [class*="m-"], [class*="p-"]');
    spacingElements.forEach(el => {
      const htmlEl = el as HTMLElement;
      // Convert Tailwind spacing to actual CSS
      const classList = Array.from(htmlEl.classList);
      classList.forEach(className => {
        if (className.includes('space-y-')) {
          const spacing = className.match(/space-y-(\d+)/)?.[1];
          if (spacing) {
            const spaceValue = parseInt(spacing) * 4; // Convert to pt
            htmlEl.style.marginBottom = `${spaceValue}pt`;
          }
        }
      });
    });

    // Fix border issues
    const borderElements = element.querySelectorAll('.border, [class*="border-"]');
    borderElements.forEach(el => {
      const htmlEl = el as HTMLElement;
      if (!htmlEl.style.border) {
        htmlEl.style.border = '1px solid #e5e7eb';
      }
    });

    // Fix rounded corners for PDF
    const roundedElements = element.querySelectorAll('[class*="rounded"]');
    roundedElements.forEach(el => {
      const htmlEl = el as HTMLElement;
      htmlEl.style.borderRadius = '0';
    });

    // Remove shadows for cleaner PDF
    const shadowElements = element.querySelectorAll('[class*="shadow"]');
    shadowElements.forEach(el => {
      const htmlEl = el as HTMLElement;
      htmlEl.style.boxShadow = 'none';
    });
  };
      
      // Convert gradients to solid colors for PDF compatibility
      const computedStyle = window.getComputedStyle(htmlEl);
      if (computedStyle.backgroundImage && computedStyle.backgroundImage.includes('gradient')) {
        htmlEl.style.background = '#6366f1';
        htmlEl.style.backgroundImage = 'none';
        htmlEl.style.color = 'white';
      }
      
      // Ensure text is visible and selectable
      if (computedStyle.color === 'transparent' || computedStyle.color === 'rgba(0, 0, 0, 0)') {
        htmlEl.style.color = '#1f2937';
      }
      
      // Fix font family for consistency
      if (htmlEl.tagName.toLowerCase() !== 'svg') {
        htmlEl.style.fontFamily = 'Inter, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
      }
    });

    // Ensure proper page structure
    element.style.width = '100%';
    element.style.maxWidth = 'none';
    element.style.backgroundColor = 'white';
    element.style.color = '#1f2937';
    element.style.fontFamily = 'Inter, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
  };

  // Template-specific optimization functions
  const optimizeModernTemplate = (element: HTMLElement) => {
    // Modern template specific fixes
    const gradientElements = element.querySelectorAll('.bg-gradient-to-r, .bg-gradient-to-br, [class*="gradient"]');
    gradientElements.forEach(el => {
      const htmlEl = el as HTMLElement;
      htmlEl.style.background = '#6366f1';
      htmlEl.style.color = 'white';
    });
  };

  const optimizeClassicTemplate = (element: HTMLElement) => {
    // Classic template specific fixes
    const headers = element.querySelectorAll('h1, h2, h3');
    headers.forEach(h => {
      const htmlEl = h as HTMLElement;
      htmlEl.style.color = '#1f2937';
      htmlEl.style.fontWeight = '600';
    });
  };

  const optimizeMinimalTemplate = (element: HTMLElement) => {
    // Minimal template specific fixes
    const sections = element.querySelectorAll('section, .section');
    sections.forEach(section => {
      const htmlEl = section as HTMLElement;
      htmlEl.style.marginBottom = '1.5rem';
      htmlEl.style.pageBreakInside = 'avoid';
    });
  };

  const optimizeCreativeTemplate = (element: HTMLElement) => {
    // Creative template specific fixes - handle complex layouts
    const coloredElements = element.querySelectorAll('[class*="purple"], [class*="pink"], [class*="blue"]');
    coloredElements.forEach(el => {
      const htmlEl = el as HTMLElement;
      const computedStyle = window.getComputedStyle(htmlEl);
      if (computedStyle.backgroundColor === 'transparent') {
        htmlEl.style.backgroundColor = '#6366f1';
        htmlEl.style.color = 'white';
      }
    });
  };

  const optimizeExecutiveTemplate = (element: HTMLElement) => {
    // Executive template specific fixes
    const professionalElements = element.querySelectorAll('.border, .shadow');
    professionalElements.forEach(el => {
      const htmlEl = el as HTMLElement;
      htmlEl.style.border = '1px solid #e5e7eb';
      htmlEl.style.boxShadow = 'none';
    });
  };

  const optimizeTechnicalTemplate = (element: HTMLElement) => {
    // Technical template specific fixes
    const codeElements = element.querySelectorAll('code, pre, .font-mono');
    codeElements.forEach(el => {
      const htmlEl = el as HTMLElement;
      htmlEl.style.fontFamily = 'Monaco, Consolas, "Liberation Mono", "Courier New", monospace';
      htmlEl.style.backgroundColor = '#f8fafc';
      htmlEl.style.padding = '0.25rem';
    });
  };

  // Universal PDF generation with template-specific settings
  const generateUniversalPDF = async (optimizedElement: HTMLElement, fileName: string, templateType: string) => {
    if (!(window as any).html2pdf) {
      throw new Error('html2pdf library not loaded');
    }

    // Enhanced template-specific PDF settings for better output
    const templateSettings = {
      modern: { scale: 3.0, quality: 1.0, dpi: 300 },
      classic: { scale: 3.0, quality: 1.0, dpi: 300 },
      minimal: { scale: 3.0, quality: 1.0, dpi: 300 },
      creative: { scale: 3.2, quality: 1.0, dpi: 300 },
      executive: { scale: 3.0, quality: 1.0, dpi: 300 },
      technical: { scale: 3.0, quality: 1.0, dpi: 300 }
    };

    const settings = templateSettings[templateType as keyof typeof templateSettings] || { scale: 3.0, quality: 1.0, dpi: 300 };

    const options = {
      margin: [0.5, 0.5, 0.5, 0.5],
      filename: fileName,
      image: { 
        type: 'jpeg', 
        quality: settings.quality 
      },
      html2canvas: { 
        scale: settings.scale,
        dpi: settings.dpi,
        letterRendering: true,
        useCORS: true,
        scrollX: 0,
        scrollY: 0,
        windowWidth: 1200,
        windowHeight: 1600,
        foreignObjectRendering: true,
        allowTaint: false,
        backgroundColor: '#ffffff',
        removeContainer: false,
        logging: false,
        width: 816,  // 8.5 inches at 96 DPI
        height: 1056, // 11 inches at 96 DPI
        onclone: (clonedDoc: Document) => {
          // Wait for fonts to load
          const style = clonedDoc.createElement('style');
          style.textContent = getPDFStylesForTemplate(templateType);
          clonedDoc.head.appendChild(style);
          
          // Preload fonts
          const fontLinks = [
            'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap',
            'https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;600;700&display=swap'
          ];
          
          fontLinks.forEach(href => {
            const fontLink = clonedDoc.createElement('link');
            fontLink.href = href;
            fontLink.rel = 'stylesheet';
            clonedDoc.head.appendChild(fontLink);
          });
          
          // Force font loading
          const fontLoadDiv = clonedDoc.createElement('div');
          fontLoadDiv.style.fontFamily = 'Inter, Roboto, Arial, sans-serif';
          fontLoadDiv.style.position = 'absolute';
          fontLoadDiv.style.top = '-1000px';
          fontLoadDiv.innerText = 'Font preload';
          clonedDoc.body.appendChild(fontLoadDiv);
        }
      },
      jsPDF: { 
        unit: 'in', 
        format: 'letter',
        orientation: 'portrait',
        compress: false,
        precision: 16,
        putOnlyUsedFonts: true,
        floatPrecision: 16
      },
      pagebreak: { 
        mode: ['avoid-all', 'css', 'legacy'],
        avoid: ['section', '.section', '.avoid-break', 'h1', 'h2', 'h3', '.experience-item', '.education-item'],
        after: ['.page-break', '.force-break']
      }
    };

    const html2pdf = (window as any).html2pdf;
    await html2pdf().set(options).from(optimizedElement).save();
  };

  // Get PDF styles specific to each template
  const getPDFStylesForTemplate = (templateType: string): string => {
    const baseStyles = `
      @page {
        size: letter;
        margin: 0.5in;
      }
      
      * { 
        -webkit-print-color-adjust: exact !important;
        color-adjust: exact !important;
        print-color-adjust: exact !important;
        box-sizing: border-box !important;
      }
      
      body {
        font-family: 'Inter', 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif !important;
        font-size: 10pt !important;
        line-height: 1.3 !important;
        color: #1f2937 !important;
        background: white !important;
        margin: 0 !important;
        padding: 0 !important;
        width: 100% !important;
      }
      
      .resume-container, .resume-content {
        width: 100% !important;
        max-width: none !important;
        margin: 0 !important;
        padding: 0 !important;
        background: white !important;
      }
      
      h1 {
        font-size: 20pt !important;
        font-weight: 700 !important;
        color: #1f2937 !important;
        margin: 0 0 8pt 0 !important;
        page-break-after: avoid !important;
        line-height: 1.2 !important;
      }
      
      h2 {
        font-size: 14pt !important;
        font-weight: 600 !important;
        color: #374151 !important;
        margin: 12pt 0 6pt 0 !important;
        page-break-after: avoid !important;
        line-height: 1.2 !important;
      }
      
      h3 {
        font-size: 12pt !important;
        font-weight: 600 !important;
        color: #4b5563 !important;
        margin: 8pt 0 4pt 0 !important;
        page-break-after: avoid !important;
        line-height: 1.2 !important;
      }
      
      h4, h5, h6 {
        font-size: 10pt !important;
        font-weight: 500 !important;
        color: #6b7280 !important;
        margin: 6pt 0 2pt 0 !important;
        page-break-after: avoid !important;
        line-height: 1.2 !important;
      }
      
      p {
        font-size: 10pt !important;
        line-height: 1.3 !important;
        margin: 0 0 4pt 0 !important;
        color: #374151 !important;
        orphans: 2 !important;
        widows: 2 !important;
      }
      
      ul, ol {
        margin: 4pt 0 8pt 16pt !important;
        padding: 0 !important;
      }
      
      li {
        font-size: 10pt !important;
        line-height: 1.3 !important;
        margin: 0 0 2pt 0 !important;
        color: #374151 !important;
      }
      
      section, .section {
        page-break-inside: avoid !important;
        margin-bottom: 12pt !important;
      }
      
      .experience-item, .education-item, .project-item {
        page-break-inside: avoid !important;
        margin-bottom: 8pt !important;
      }
      
      a {
        color: #2563eb !important;
        text-decoration: underline !important;
      }
      
      .bg-gradient-to-r, .bg-gradient-to-br, [class*="gradient"] {
        background: #3b82f6 !important;
        background-image: none !important;
        color: white !important;
        -webkit-background-clip: unset !important;
        background-clip: unset !important;
      }
      
      .text-transparent {
        color: #3b82f6 !important;
        background: none !important;
        -webkit-background-clip: unset !important;
        background-clip: unset !important;
      }
      
      .grid {
        display: block !important;
      }
      
      .flex {
        display: block !important;
      }
      
      .grid-cols-1, .grid-cols-2, .grid-cols-3 {
        display: block !important;
      }
      
      .shadow, .shadow-sm, .shadow-md, .shadow-lg {
        box-shadow: none !important;
      }
      
      .border {
        border: 1px solid #e5e7eb !important;
      }
      
      .rounded, .rounded-md, .rounded-lg {
        border-radius: 0 !important;
      }
      
      .space-y-1 > *, .space-y-2 > *, .space-y-3 > *, .space-y-4 > * {
        margin-top: 4pt !important;
      }
      
      .space-y-1 > *:first-child, .space-y-2 > *:first-child, .space-y-3 > *:first-child, .space-y-4 > *:first-child {
        margin-top: 0 !important;
      }
      
      img {
        max-width: 100% !important;
        height: auto !important;
      }
    `;

    const templateSpecificStyles = {
      modern: `
        .modern-header, [class*="modern"] .header {
          background: #3b82f6 !important;
          color: white !important;
          padding: 16pt !important;
        }
        .modern-section, [class*="modern"] .section {
          border-left: 3px solid #3b82f6 !important;
          padding-left: 8pt !important;
          margin-bottom: 12pt !important;
        }
        .modern-name, [class*="modern"] h1 {
          color: white !important;
          font-size: 24pt !important;
        }
        .modern-title, [class*="modern"] .subtitle {
          color: #dbeafe !important;
          font-size: 12pt !important;
        }
      `,
      classic: `
        .classic-border, [class*="classic"] .border {
          border: 1px solid #d1d5db !important;
          padding: 8pt !important;
        }
        .classic-header, [class*="classic"] .header {
          background: #f9fafb !important;
          color: #1f2937 !important;
          border-bottom: 2px solid #e5e7eb !important;
          padding: 12pt !important;
        }
        .classic-divider {
          border-bottom: 1px solid #e5e7eb !important;
          margin: 8pt 0 !important;
        }
        .classic-section h2 {
          color: #1f2937 !important;
          border-bottom: 1px solid #d1d5db !important;
          padding-bottom: 2pt !important;
        }
      `,
      minimal: `
        .minimal-divider, [class*="minimal"] .divider {
          border-bottom: 1px solid #f3f4f6 !important;
          margin: 6pt 0 !important;
        }
        .minimal-text, [class*="minimal"] p {
          color: #6b7280 !important;
          font-size: 9pt !important;
        }
        .minimal-header h1 {
          color: #1f2937 !important;
          font-weight: 300 !important;
        }
        .minimal-section h2 {
          color: #4b5563 !important;
          font-weight: 400 !important;
          text-transform: uppercase !important;
          font-size: 11pt !important;
          letter-spacing: 0.5pt !important;
        }
      `,
      creative: `
        .creative-accent, [class*="creative"] .accent {
          background: #8b5cf6 !important;
          color: white !important;
          padding: 8pt !important;
          border-radius: 0 !important;
        }
        .creative-card, [class*="creative"] .card {
          box-shadow: none !important;
          border: 1px solid #e5e7eb !important;
          background: #fefefe !important;
          padding: 8pt !important;
        }
        .creative-highlight {
          background: #fef3c7 !important;
          color: #92400e !important;
          padding: 2pt 4pt !important;
        }
        .creative-header {
          background: linear-gradient(45deg, #8b5cf6, #3b82f6) !important;
          color: white !important;
        }
      `,
      executive: `
        .executive-header, [class*="executive"] .header {
          background: #1f2937 !important;
          color: white !important;
          padding: 16pt !important;
        }
        .executive-border, [class*="executive"] .border {
          border: 2px solid #374151 !important;
          padding: 8pt !important;
        }
        .executive-section h2 {
          color: #1f2937 !important;
          font-weight: 700 !important;
          border-bottom: 2px solid #1f2937 !important;
          padding-bottom: 4pt !important;
        }
        .executive-contact {
          background: #f8fafc !important;
          border: 1px solid #e2e8f0 !important;
          padding: 8pt !important;
        }
      `,
      technical: `
        .tech-code, [class*="tech"] code, [class*="tech"] pre {
          font-family: 'Monaco', 'Consolas', 'Liberation Mono', 'Courier New', monospace !important;
          background: #f1f5f9 !important;
          color: #1e293b !important;
          padding: 4pt !important;
          border: 1px solid #cbd5e1 !important;
          font-size: 8pt !important;
        }
        .tech-header {
          background: #0f172a !important;
          color: #f1f5f9 !important;
          font-family: 'Monaco', monospace !important;
        }
        .tech-section h2 {
          color: #1e293b !important;
          font-family: 'Monaco', monospace !important;
          font-weight: 600 !important;
        }
        .tech-skill {
          background: #e2e8f0 !important;
          color: #334155 !important;
          padding: 2pt 4pt !important;
          font-family: monospace !important;
        }
      `
    };

    return baseStyles + (templateSpecificStyles[templateType as keyof typeof templateSpecificStyles] || '');
  };

  // Enhanced browser PDF generation with better formatting
  const generateBrowserPDF = async (optimizedElement: HTMLElement, fileName: string) => {
    const printWindow = window.open('', '_blank', 'width=1200,height=800');
    if (!printWindow) throw new Error('Could not open print window');

    const printContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>${fileName}</title>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
          <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;600;700&display=swap" rel="stylesheet">
          <style>
            ${getPDFStylesForTemplate(resumeData.selectedTemplate || 'modern')}
            
            @media print {
              @page { 
                margin: 0.5in; 
                size: letter portrait;
              }
              
              body { 
                margin: 0; 
                padding: 0; 
                width: 100%; 
                background: white !important;
                font-size: 10pt !important;
                line-height: 1.3 !important;
              }
              
              .resume-content { 
                width: 100%; 
                max-width: none; 
                background: white;
                margin: 0;
                padding: 0;
              }
              
              .no-print { display: none !important; }
              
              h1 { font-size: 20pt !important; }
              h2 { font-size: 14pt !important; }
              h3 { font-size: 12pt !important; }
              p, li { font-size: 10pt !important; }
              
              section {
                page-break-inside: avoid !important;
                margin-bottom: 12pt !important;
              }
              
              .experience-item, .education-item, .project-item {
                page-break-inside: avoid !important;
              }
            }
            
            body {
              font-family: 'Inter', 'Roboto', Arial, sans-serif;
              font-size: 10pt;
              line-height: 1.3;
              color: #1f2937;
              background: white;
              margin: 0;
              padding: 20px;
            }
            
            .resume-content {
              max-width: 8.5in;
              margin: 0 auto;
              background: white;
              padding: 0;
            }
            
            .print-button {
              position: fixed;
              top: 20px;
              right: 20px;
              background: #3b82f6;
              color: white;
              border: none;
              padding: 10px 20px;
              border-radius: 5px;
              cursor: pointer;
              font-size: 14px;
              z-index: 1000;
            }
            
            .print-button:hover {
              background: #2563eb;
            }
            
            @media print {
              .print-button { display: none !important; }
            }
          </style>
        </head>
        <body>
          <button class="print-button no-print" onclick="window.print()">Print / Save as PDF</button>
          <div class="resume-content">
            ${optimizedElement.innerHTML}
          </div>
          <script>
            // Wait for fonts to load before showing print dialog
            document.fonts.ready.then(() => {
              setTimeout(() => {
                // Auto-trigger print after a short delay
                // Comment out the next line if you want manual control
                // window.print();
              }, 1500);
            });
            
            // Close window after printing (optional)
            window.addEventListener('afterprint', () => {
              setTimeout(() => {
                // window.close();
              }, 1000);
            });
          </script>
        </body>
      </html>
    `;

    printWindow.document.write(printContent);
    printWindow.document.close();
    
    // Focus the print window
    printWindow.focus();
  };

  // Enhanced print fallback
  const enhancedPrintFallback = async () => {
    setDownloadStatus('Opening print dialog...');
    
    // Apply print-specific styles to current document
    const printStyles = document.createElement('style');
    printStyles.id = 'temp-print-styles';
    printStyles.textContent = `
      @media print {
        body * { visibility: hidden; }
        #resume-preview-content, #resume-preview-content * { 
          visibility: visible; 
        }
        #resume-preview-content {
          position: absolute;
          left: 0;
          top: 0;
          width: 100% !important;
          height: auto !important;
        }
        ${getPDFStylesForTemplate(resumeData.selectedTemplate || 'modern')}
      }
    `;
    document.head.appendChild(printStyles);

    // Trigger print
    window.print();

    // Clean up
    setTimeout(() => {
      const styleElement = document.getElementById('temp-print-styles');
      if (styleElement) {
        styleElement.remove();
      }
    }, 1000);
  };

  const generatePDFWithPuppeteer = async (optimizedElement: HTMLElement, fileName: string) => {
    // Modern browser-based PDF generation
    const printWindow = window.open('', '_blank', 'width=1200,height=800');
    if (!printWindow) throw new Error('Popup blocked');

    const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <title>${fileName}</title>
          <style>
            @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
            
            * {
              box-sizing: border-box;
              margin: 0;
              padding: 0;
            }
            
            @page {
              size: letter;
              margin: 0.5in;
            }
            
            body {
              font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
              font-size: 11pt;
              line-height: 1.4;
              color: #1f2937;
              background: white;
              -webkit-print-color-adjust: exact;
              print-color-adjust: exact;
            }
            
            .pdf-container {
              width: 100%;
              max-width: 8.5in;
              margin: 0 auto;
              background: white;
              padding: 0;
            }
            
            h1, h2, h3, h4, h5, h6 {
              color: #1f2937;
              font-weight: 600;
              margin-bottom: 0.5rem;
              page-break-after: avoid;
            }
            
            h1 { font-size: 24pt; }
            h2 { font-size: 18pt; }
            h3 { font-size: 14pt; }
            h4 { font-size: 12pt; }
            
            p, li {
              margin-bottom: 0.25rem;
              orphans: 2;
              widows: 2;
            }
            
            section {
              page-break-inside: avoid;
              margin-bottom: 1.5rem;
            }
            
            .bg-gradient-to-r,
            .bg-gradient-to-br,
            [class*="gradient"] {
              background: #6366f1 !important;
              background-image: none !important;
              color: white !important;
            }
            
            .text-transparent {
              color: #6366f1 !important;
              background: none !important;
              -webkit-background-clip: unset !important;
            }
            
            a {
              color: #2563eb;
              text-decoration: underline;
            }
            
            .grid {
              display: block;
            }
            
            .flex {
              display: block;
            }
            
            .space-y-1 > * + * { margin-top: 0.25rem; }
            .space-y-2 > * + * { margin-top: 0.5rem; }
            .space-y-3 > * + * { margin-top: 0.75rem; }
            .space-y-4 > * + * { margin-top: 1rem; }
            .space-y-6 > * + * { margin-top: 1.5rem; }
            
            .mb-2 { margin-bottom: 0.5rem; }
            .mb-3 { margin-bottom: 0.75rem; }
            .mb-4 { margin-bottom: 1rem; }
            .mb-6 { margin-bottom: 1.5rem; }
            .mb-8 { margin-bottom: 2rem; }
            
            .p-4 { padding: 1rem; }
            .p-6 { padding: 1.5rem; }
            
            .border {
              border: 1px solid #e5e7eb;
            }
            
            .border-b {
              border-bottom: 1px solid #e5e7eb;
            }
            
            .border-l-4 {
              border-left: 4px solid #6366f1;
            }
            
            .rounded-lg {
              border-radius: 0.5rem;
            }
            
            .text-sm { font-size: 10pt; }
            .text-lg { font-size: 12pt; }
            .text-xl { font-size: 14pt; }
            .text-2xl { font-size: 16pt; }
            .text-3xl { font-size: 18pt; }
            
            .font-bold { font-weight: 700; }
            .font-semibold { font-weight: 600; }
            .font-medium { font-weight: 500; }
            
            .text-gray-600 { color: #6b7280; }
            .text-gray-700 { color: #4b5563; }
            .text-gray-800 { color: #374151; }
            .text-gray-900 { color: #1f2937; }
            
            @media print {
              .no-print { display: none !important; }
              body { -webkit-print-color-adjust: exact !important; }
            }
          </style>
        </head>
        <body>
          <div class="pdf-container">
            ${optimizedElement.innerHTML}
          </div>
          <script>
            window.onload = function() {
              setTimeout(() => {
                window.print();
                setTimeout(() => window.close(), 1000);
              }, 1000);
            };
          </script>
        </body>
      </html>
    `;

    printWindow.document.write(htmlContent);
    printWindow.document.close();
  };

  const generatePDFWithHtml2Pdf = async (optimizedElement: HTMLElement, fileName: string) => {
    if (!(window as any).html2pdf) {
      throw new Error('PDF library not loaded');
    }

    setDownloadProgress(60);
    setDownloadStatus('Configuring PDF settings...');

    const options = {
      margin: [0.5, 0.5, 0.5, 0.5],
      filename: fileName,
      image: { 
        type: 'jpeg', 
        quality: 0.98,
        compressPDF: true
      },
      html2canvas: { 
        scale: 2,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff',
        logging: false,
        letterRendering: true,
        foreignObjectRendering: true,
        removeContainer: true,
        imageTimeout: 0,
        onclone: (clonedDoc: Document) => {
          const style = clonedDoc.createElement('style');
          style.textContent = `
            @page { margin: 0.5in; size: letter; }
            * { 
              -webkit-print-color-adjust: exact !important;
              color-adjust: exact !important;
              print-color-adjust: exact !important;
            }
            body { 
              font-family: 'Inter', sans-serif !important;
              font-size: 11pt !important; 
              line-height: 1.4 !important; 
              color: #000000 !important; 
            }
            .bg-gradient-to-r, .bg-gradient-to-br, [class*="gradient"] {
              background: #6366f1 !important;
              background-image: none !important;
              color: white !important;
            }
            .text-transparent {
              color: #6366f1 !important;
              background: none !important;
            }
          `;
          clonedDoc.head.appendChild(style);
          
          // Ensure all fonts are loaded
          const fontLink = clonedDoc.createElement('link');
          fontLink.href = 'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap';
          fontLink.rel = 'stylesheet';
          clonedDoc.head.appendChild(fontLink);
        }
      },
      jsPDF: { 
        unit: 'in', 
        format: 'letter',
        orientation: 'portrait',
        compress: true
      },
      pagebreak: { 
        mode: ['avoid-all', 'css'],
        avoid: ['section', '.avoid-break']
      }
    };

    setDownloadProgress(80);
    setDownloadStatus('Generating PDF...');

    const html2pdf = (window as any).html2pdf;
    await html2pdf().set(options).from(optimizedElement).save();
    
    setDownloadProgress(100);
    setDownloadStatus('Download complete!');
  };

  const fallbackPDFDownload = async () => {
    const element = document.getElementById('resume-preview-content');
    if (!element) return;

    const printWindow = window.open('', '_blank');
    if (printWindow) {
      const optimizedElement = await optimizeElementForPDF(element);
      
      printWindow.document.write(`
        <!DOCTYPE html>
        <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>${resumeData.personalInfo?.fullName || 'Resume'} - Resume</title>
            <style>
              @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
              
              * { 
                margin: 0; 
                padding: 0; 
                box-sizing: border-box;
                -webkit-print-color-adjust: exact !important;
                color-adjust: exact !important;
                print-color-adjust: exact !important;
              }
              
              @page { 
                margin: 0.5in; 
                size: letter portrait;
              }
              
              body { 
                font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
                font-size: 11pt !important;
                line-height: 1.4 !important;
                color: #1f2937 !important;
                background: white !important;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
              }
              
              .resume-content { 
                width: 100%; 
                background: white !important;
                max-width: none !important;
                padding: 0 !important;
              }
              
              h1, h2, h3, h4, h5, h6 {
                font-weight: 600 !important;
                margin-bottom: 0.5rem !important;
                page-break-after: avoid !important;
              }
              
              p, li {
                margin-bottom: 0.25rem !important;
                orphans: 2;
                widows: 2;
              }
              
              section {
                page-break-inside: avoid !important;
                margin-bottom: 1rem !important;
              }
              
              .bg-gradient-to-r, .bg-gradient-to-br, [class*="gradient"] {
                background: #6366f1 !important;
                background-image: none !important;
                color: white !important;
              }
              
              .text-transparent {
                color: #6366f1 !important;
              }
              
              a {
                color: #2563eb !important;
                text-decoration: underline !important;
              }
              
              @media print {
                body { 
                  -webkit-print-color-adjust: exact !important;
                  print-color-adjust: exact !important;
                }
                
                .no-print { display: none !important; }
                
                * {
                  color-adjust: exact !important;
                  -webkit-print-color-adjust: exact !important;
                }
              }
            </style>
          </head>
          <body>
            <div class="resume-content">
              ${optimizedElement.innerHTML}
            </div>
            <script>
              window.onload = function() {
                // Wait for fonts and content to load
                setTimeout(() => { 
                  window.print(); 
                  setTimeout(() => window.close(), 1000); 
                }, 1500);
              };
            </script>
          </body>
        </html>
      `);
      printWindow.document.close();
    }
  };

  if (isFullscreen) {
    return (
      <div className="fixed inset-0 z-[999] bg-white">
        {/* Fullscreen Header */}
        <div className="flex items-center justify-between px-6 py-3 bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-md">
          <div className="flex items-center space-x-4">
            <div className="relative w-40 h-10 rounded-lg overflow-hidden bg-white/20 backdrop-blur-sm">
              <img 
                src="/custom-logo.jpg"
                alt="Alumna AI Resume Builder"
                className="w-full h-full object-contain p-1"
                style={{ 
                  maxWidth: "100%", 
                  maxHeight: "100%",
                  filter: "drop-shadow(0 1px 2px rgba(0, 0, 0, 0.1))",
                  transform: "scale(1.25)"
                }}
                onError={(e) => {
                  const target = e.currentTarget as HTMLImageElement;
                  console.log('Fullscreen custom logo failed to load:', target.src);
                  // Fallback to text logo if image fails
                  target.style.display = 'none';
                  const parent = target.parentElement;
                  if (parent) {
                    parent.innerHTML = '<div class="flex items-center justify-center w-full h-full text-white font-bold text-sm">ALUMNA.AI</div>';
                  }
                }}
                onLoad={() => {
                  console.log('Fullscreen custom logo loaded successfully');
                }}
              />
            </div>
            <span className="text-lg font-semibold">Resume Preview</span>
          </div>
          <div className="flex items-center space-x-3">
            <Button
              onClick={downloadPDF}
              disabled={isDownloading}
              className="bg-white text-purple-600 hover:bg-gray-100 shadow-md"
            >
              {isDownloading ? (
                <div className="flex items-center space-x-2">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-purple-600"></div>
                  <span>Generating...</span>
                </div>
              ) : (
                <div className="flex items-center space-x-2">
                  <Download className="h-4 w-4" />
                  <span>Download PDF</span>
                </div>
              )}
            </Button>
            <Button
              variant="outline"
              onClick={() => setIsFullscreen(false)}
              className="bg-white/10 border-white/20 text-white hover:bg-white/20"
            >
              Exit Fullscreen
            </Button>
          </div>
        </div>
        
        <div 
          id="resume-preview-content"
          className="w-full overflow-auto"
          ref={resumeRef}
          style={{ 
            height: 'calc(100vh - 60px)', // Account for header height
            scrollBehavior: 'smooth',
            overscrollBehavior: 'contain'
          }}
        >
          {renderTemplate()}
        </div>
        
        {/* Bottom Exit Button - Original Position */}
        <div className="fixed bottom-4 right-4 z-[1000] flex gap-2">
          <Button
            variant="outline"
            onClick={() => setIsFullscreen(false)}
            className="bg-white shadow-lg border-gray-300 text-gray-700 hover:bg-gray-50"
          >
            Exit Fullscreen
          </Button>
        </div>
      </div>
    );
  }

  return (
    <Card className="card-modern sticky top-24 h-fit overflow-hidden border-0 shadow-xl">
      <div className="p-6">
        {/* Enhanced Header with Controls */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg flex items-center justify-center">
              <Eye className="h-5 w-5 text-white" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900">Live Preview</h3>
              <div className="flex items-center space-x-2 text-xs text-gray-500">
                <div className="w-2 h-2 bg-emerald-400 rounded-full animate-pulse"></div>
                <span>Real-time updates</span>
              </div>
            </div>
          </div>
          
          <div className="flex items-center space-x-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setZoom(Math.max(0.4, zoom - 0.1))}
              className="text-xs px-3 py-2 border-gray-200 hover:border-purple-300 hover:bg-purple-50 transition-all duration-200"
            >
              <ZoomOut className="h-4 w-4" />
            </Button>
            <div className="bg-gray-100 px-3 py-1 rounded-lg">
              <span className="text-sm font-medium text-gray-700">
                {Math.round(zoom * 100)}%
              </span>
            </div>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setZoom(Math.min(1.5, zoom + 0.1))}
              className="text-xs px-3 py-2 border-gray-200 hover:border-purple-300 hover:bg-purple-50 transition-all duration-200"
            >
              <ZoomIn className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setIsFullscreen(true)}
              className="px-3 py-2 border-gray-200 hover:border-purple-300 hover:bg-purple-50 transition-all duration-200"
            >
              <Maximize2 className="h-4 w-4" />
            </Button>
          </div>
        </div>
        
        <div 
          className={`relative bg-gradient-to-br from-gray-50 to-gray-100 border border-gray-200 rounded-xl overflow-hidden transition-all duration-500 ${isHovering ? 'shadow-2xl scale-[1.02]' : 'shadow-lg'}`}
          onMouseEnter={() => setIsHovering(true)}
          onMouseLeave={() => setIsHovering(false)}
        >

        {/* Resume Content */}
        <div
          className="bg-white shadow-2xl mx-auto transition-all duration-500 ease-out"
          ref={resumeRef}
          style={{
            width: '100%',
            maxWidth: '100%',
            minHeight: '600px',
            height: '700px',
            transform: `scale(${zoom})`,
            transformOrigin: 'top center',
            marginBottom: '0',
            borderRadius: '12px',
          }}
        >
          <div
            id="resume-preview-content"
            className="h-full overflow-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-transparent"
            style={{
              fontSize: '12px',
              lineHeight: '1.5'
            }}
          >
            {renderTemplate()}
          </div>
        </div>

          {/* Interactive overlay for non-fullscreen */}
          {!isFullscreen && isHovering && (
            <div className="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent pointer-events-none">
              <div className="absolute bottom-4 left-4 right-4 flex justify-center">
                <div className="bg-white/90 backdrop-blur-sm rounded-lg px-4 py-2 shadow-lg">
                  <span className="text-sm font-medium text-gray-700">Click fullscreen for better view</span>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Download Button */}
        {!isFullscreen && (
          <div className="mt-6">
            <Button
              onClick={downloadPDF}
              disabled={isDownloading}
              className="w-full bg-gradient-to-r from-purple-500 to-pink-500 text-white hover:from-purple-600 hover:to-pink-600 text-base py-3 transition-all duration-300 shadow-lg hover:shadow-xl relative overflow-hidden"
            >
              {isDownloading && downloadProgress > 0 && (
                <div 
                  className="absolute inset-0 bg-white/20 transition-all duration-300 ease-out"
                  style={{ width: `${downloadProgress}%` }}
                />
              )}
              <div className="relative z-10 flex items-center justify-center">
                {isDownloading ? (
                  <>
                    <div className="h-5 w-5 mr-3 animate-spin rounded-full border-2 border-white border-t-transparent" />
                    <div className="flex flex-col items-start">
                      <span>Generating PDF...</span>
                      {downloadStatus && (
                        <span className="text-xs opacity-80">{downloadStatus}</span>
                      )}
                    </div>
                  </>
                ) : (
                  <>
                    <Download className="h-5 w-5 mr-3" />
                    Download Professional PDF ✨
                  </>
                )}
              </div>
            </Button>
            
            {/* Progress bar */}
            {isDownloading && (
              <div className="mt-2 bg-gray-200 rounded-full h-2 overflow-hidden">
                <div 
                  className="bg-gradient-to-r from-purple-500 to-pink-500 h-full transition-all duration-300 ease-out"
                  style={{ width: `${downloadProgress}%` }}
                />
              </div>
            )}
          </div>
        )}

        {/* Enhanced Template Info */}
        <div className="mt-6 p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl border border-purple-100">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-gradient-to-br from-purple-400 to-pink-400 rounded-lg flex items-center justify-center">
                <FileText className="h-4 w-4 text-white" />
              </div>
              <div>
                <p className="text-sm font-semibold text-gray-900 capitalize">
                  {resumeData.selectedTemplate} Template
                </p>
                <p className="text-xs text-gray-600">
                  ATS-optimized • Professional formatting • High-quality PDF
                </p>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <div className="flex space-x-1">
                <div className="w-2 h-2 bg-emerald-400 rounded-full animate-pulse"></div>
                <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse delay-75"></div>
                <div className="w-2 h-2 bg-purple-400 rounded-full animate-pulse delay-150"></div>
              </div>
              <span className="text-xs text-purple-600 font-medium">Live</span>
            </div>
          </div>
          
          {/* PDF Quality Features */}
          <div className="mt-3 pt-3 border-t border-purple-100">
            <div className="grid grid-cols-2 gap-2 text-xs text-gray-600">
              <div className="flex items-center space-x-1">
                <div className="w-2 h-2 bg-emerald-400 rounded-full"></div>
                <span>Vector Graphics</span>
              </div>
              <div className="flex items-center space-x-1">
                <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                <span>Selectable Text</span>
              </div>
              <div className="flex items-center space-x-1">
                <div className="w-2 h-2 bg-purple-400 rounded-full"></div>
                <span>Print Ready</span>
              </div>
              <div className="flex items-center space-x-1">
                <div className="w-2 h-2 bg-pink-400 rounded-full"></div>
                <span>Letter Size</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Card>
  );
}
